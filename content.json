{"meta":{"title":"Colin's Blog","subtitle":"","description":"个人博客","author":"Colin Lin","url":"http://linco.com"},"pages":[],"posts":[{"title":"Centos7 安装指定版本 Docker","slug":"centos7安装docker","date":"2020-03-26T13:09:56.873Z","updated":"2020-03-26T14:15:34.568Z","comments":true,"path":"2020/03/26/centos7安装docker/","link":"","permalink":"http://linco.com/2020/03/26/centos7%E5%AE%89%E8%A3%85docker/","excerpt":"","text":"卸载旧版本12345678sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine Docker 默认安装1$ yum -y install docker # 默认安装最新版本 Docker安装指定版本安装所需软件包yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。 123$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 使用yum-config-manager 添加docker仓库123$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 执行以下命令，列出 docker 所有可用版本1$ yum list docker-ce --showduplicates | sort -r 根据自己选择特定版本号的docker安装$ sudo yum install docker-ce- docker-ce-cli- containerd.io 例如： 1sudo yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y 启动 Docker 并且配置 开机自启动12$ sudo systemctl start docker$ sudo systemctl enable docker 配置阿里云镜像加速自行注册阿里云账号，获取自己的镜像加速地址：https://cr.console.aliyun.com/cn-hongkong/instances/mirrors 解决普通用户（非root)无权限使用docker命令问题docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。为了方便普通用户每次执行docker不需要加sudo,我们可以用以下方法给普通用户授权： docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令。 1234sudo groupadd docker #添加docker用户组sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中newgrp docker #更新用户组docker ps #测试docker命令是否可以使用sudo正常使用 结束语Centos7 安装 Docker 就此完成，感谢支持！","categories":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"http://linco.com/tags/Docker/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}]},{"title":"Mybatis 入门","slug":"mybatis入门01","date":"2020-03-20T07:25:40.122Z","updated":"2020-03-20T16:32:15.138Z","comments":true,"path":"2020/03/20/mybatis入门01/","link":"","permalink":"http://linco.com/2020/03/20/mybatis%E5%85%A5%E9%97%A801/","excerpt":"","text":"Mybatis简介MyBatis 前身是iBatis,其源于“Internet”和“ibatis”的组合， 是一款优秀的持久层框架，它支持自定义SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 其本质是一种半自动的ORM 框架，除了POJO 和映射关系之外，还需要编写SQL 语句；Mybatis 映射文件三要素：SQL、映射规则和POJO为什么需要ORM框架传统的JDBC 编程存在的弊端: - 工作量大，操作数据库至少要5步； - 业务代码和技术代码耦合； - 连接资源手动关闭，带来了隐患。入门导入依赖12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.4&lt;/version&gt;&lt;/dependency&gt; 创建Mybatis配置文件文件名：mybatis-config.xml, 以下主要列出mybatis配置文件的顶层结构，详细配置可参考:mybatis.org 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!--properties属性配置--&gt; &lt;properties/&gt; &lt;!--设置--&gt; &lt;settings/&gt; &lt;!--类型别名，类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。--&gt; &lt;typeAliases/&gt; &lt;!--类型处理器--&gt; &lt;typeHandlers/&gt; &lt;!-- 对象工厂--&gt; &lt;objectFactory&gt; &lt;!-- 插件 --&gt; &lt;plugins）/&gt; &lt;!--environments 元素定义了如何配置环境。--&gt; &lt;environments default=\"development\"&gt; &lt;environment/&gt; &lt;!-- 事务管理器 --&gt; &lt;transactionManager/&gt; &lt;!--数据源--&gt; &lt;dataSource&gt; &lt;/environments&gt; &lt;!-- 映射器 --&gt; &lt;mappers&gt; &lt;mapper resource=\"sqlmapper/UserMapper.xml\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建 Java Bean 实体类12345678910package com.colin.mybatisdemo.entiry;public class User &#123; private Integer id; private String userName; private String mobile;&#125; 创建 Mapper 接口跟Mapper xml 文件映射 1234567package com.colin.mybatisdemo.mapper;import com.colin.mybatisdemo.entiry.User;public interface UserMapper &#123; User getOneById(int id);&#125; 创建 Mapper xml 映射文件123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;&lt;mapper namespace=\"com.colin.mybatisdemo.mapper.UserMapper\"&gt; &lt;select id=\"getOneById\" resultType=\"User\"&gt; SELECT * from USER where id = #&#123;id, jdbcType=INTEGER&#125;; &lt;/select&gt;&lt;/mapper&gt; &emsp;&emsp;MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。 &emsp;&emsp;SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）： cache – 该命名空间的缓存配置。 cache-ref – 引用其它命名空间的缓存配置。 resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。 parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。 sql – 可被其它语句引用的可重用语句块。 insert – 映射插入语句。 update – 映射更新语句。 delete – 映射删除语句。 select – 映射查询语句。 具体使用详解可参考：[mybatis.org](https://mybatis.org/mybatis-3/zh/sqlmap-xml.html)创建一个测试类-快速入门12345678910111213141516171819202122232425262728public class UserMapperTest &#123; private SqlSessionFactory sqlSessionFactory; @Before public void testBefore() throws IOException &#123; //--------------------第一阶段--------------------------- // 1.读取mybatis配置文件创SqlSessionFactory String resource = \"mybatis-config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); // 1.读取mybatis配置文件创SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); inputStream.close(); &#125; @Test public void testGetOneById()&#123; //--------------------第二阶段--------------------------- // 2.获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 3.获取对应mapper UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //--------------------第三阶段--------------------------- // 4.执行查询语句并返回单条数据 User user = userMapper.getOneById(1); System.out.println(user.getUserName() + \":\" + user.getMobile()); &#125;&#125; 结束语Mybatis 入门介绍就讲到这里了，博客Demo源码请访问：mybatis-demo","categories":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"MyBatis","slug":"MyBatis","permalink":"http://linco.com/tags/MyBatis/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-19T15:11:45.272Z","updated":"2020-03-19T15:11:45.272Z","comments":true,"path":"2020/03/19/hello-world/","link":"","permalink":"http://linco.com/2020/03/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[],"keywords":[]}]}