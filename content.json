{"meta":{"title":"Colin's Blog","subtitle":"","description":"个人博客","author":"Colin Lin","url":"http://linco.com"},"pages":[],"posts":[{"title":"docker 容器内部安装 vim","slug":"docker 容器内部安装 vim","date":"2020-03-27T16:25:00.787Z","updated":"2020-03-28T11:39:16.597Z","comments":true,"path":"2020/03/28/docker 容器内部安装 vim/","link":"","permalink":"http://linco.com/2020/03/28/docker%20%E5%AE%B9%E5%99%A8%E5%86%85%E9%83%A8%E5%AE%89%E8%A3%85%20vim/","excerpt":"","text":"Docker 容器内部默认是没有按准vim的，如果我们需要在docker容器内部使用vim, 可以通过以下方式安装： 1、首先执行以下命令，更新安装源： 1apt-get update 2、再执行以下命令安装vim即可： 1apt-get install vim","categories":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"http://linco.com/tags/Docker/"},{"name":"后端","slug":"后端","permalink":"http://linco.com/tags/%E5%90%8E%E7%AB%AF/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}]},{"title":"Linux 查看内存及CPU使用情况","slug":"Linux 内存相关知识","date":"2020-03-27T12:07:07.659Z","updated":"2020-03-28T11:32:15.811Z","comments":true,"path":"2020/03/27/Linux 内存相关知识/","link":"","permalink":"http://linco.com/2020/03/27/Linux%20%E5%86%85%E5%AD%98%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/","excerpt":"","text":"方式一：单独查看内存使用情况的命令1free -选项 选项：&emsp;&emsp;-b：以Byte为单位显示内存使用情况；&emsp;&emsp;-k：以KB为单位显示内存使用情况；&emsp;&emsp;-m：以MB为单位显示内存使用情况；&emsp;&emsp;-o：不显示缓冲区调节列；&emsp;&emsp;-s&lt;间隔秒数&gt;：持续观察内存使用状况；&emsp;&emsp;-t：显示内存总和列；&emsp;&emsp;-V：显示版本信息。 实例： 1234[linco@linco-centos7 ~]$ free -m total used free shared buff/cache availableMem: 991 224 166 6 599 604Swap: 2047 1 2046 其中第一列解释如下：&emsp;&emsp;Mem 内存的使用信息&emsp;&emsp;Swap 交换空间的使用信息 第一行解释如下：&emsp;&emsp;total：系统总的可用物理内存大小；&emsp;&emsp;used：已被使用的物理内存大小；&emsp;&emsp;free：空闲的物理内存大小；&emsp;&emsp;shared：当前已经废弃不用；&emsp;&emsp;buff/cache：被 buffer 和 cache 使用的物理内存大小；&emsp;&emsp;available：还可以被 应用程序 使用的物理内存大小&emsp;&emsp;其中total = used + free free 与 available 的区别：free 是真正尚未被使用的物理内存数量。available 是应用程序认为可用内存数量，available = free + buffer + cache (注：只是大概的计算方法) buff/cache 清理：&emsp;&emsp;Linux服务器运行一段时间后，由于其内存管理机制，会将暂时不用的内存转为buff/cache，这样在程序使用到这一部分数据时，能够很快的取出，从而提高系统的运行效率，所以这也正是linux内存管理中非常出色的一点，所以乍一看内存剩余的非常少，但是在程序真正需要内存空间时,也就是free内存不够时，linux内核就会回收 buffer 和 cache 的内存让出给程序使用，这样达到对内存的最充分利用，所以真正剩余的内存是free+buff/cache。 &emsp;&emsp;但是有些时候大量的缓存占据空间，这时候应用程序回去使用swap交换空间，从而使系统变慢，这时候需要手动去释放内存，释放内存的时候，首先执行命令 sync 将所有正在内存中的缓冲区写到磁盘中，其中包括已经修改的文件inode、已延迟的块I/O以及读写映射文件，从而确保文件系统的完整性。[sync命令的作用] 1234567#先执行syncsync#再根据自己需求选择以下命令执行echo 1 &gt; /proc/sys/vm/drop_caches #表示清除pagecache。 echo 2 &gt; /proc/sys/vm/drop_caches #表示清除回收slab分配器中的对象（包括目录项缓存和inode缓存）。slab分配器是内核中管理内存的一种机制，其中很多缓存数据实现都是用的pagecache。 echo 3 &gt; /proc/sys/vm/drop_caches #表示清除pagecache和slab分配器中的缓存对象，即所有缓存。 &emsp;&emsp;如果执行以上echo x &gt; … 提示没有权限，我们除了加sudo之外还需要使用 “sh -c” 命令,它可以让 bash 将一个字串作为完整的命令来执行。&emsp;&emsp;因为重定向符号 “&gt;” 也是 bash 的命令。如果仅用“ sudo echo 1 &gt; /proc/sys/vm/drop_caches”只是让 echo 命令具有了 root 权限，但是没有让 “&gt;” 命令也具有root 权限，所以 bash 会认为这个命令没有写入信息的权权限。参考 正确做法如下： 12345sudo sh -c \"echo 1 &gt; /proc/sys/vm/drop_caches\"sudo sh -c \"echo 2 &gt; /proc/sys/vm/drop_caches\"sudo sh -c \"echo 3 &gt; /proc/sys/vm/drop_caches\" Swap 交换分区：&emsp;&emsp;交换空间是现代Linux系统中的第二种内存类型。交换空间的主要功能是当实际内存被填满，需要更多的空间时，用磁盘空间代替RAM内存。可以在常规文件系统或逻辑卷上使用一个或多个专用交换分区或交换文件。 如何为swap交换分区扩容：增加交换分区一般有两种方法，第一种是系统安装时进行设置的。方法1：使用分区：在安装OS时划分出专门的交换分区，空间大小要事先规划好，启动系统时自动进行mount。这种方法只能在安装OS时设定，一旦设定好不容易改变，除非重装系统。方法2：使用swapfile：步骤：1、创建swapfile：root权限下，创建swapfile，假设当前目录为”/“,执行如下命令： 12 dd if=/dev/zero of=swapfile bs=1024 count=128000#在根目录下创建了一个swapfile,名称为“swapfile”，大小为128M，也可以把文件输出到自己想要的任何目录中，放在根目录下比较好，不容易误破坏，放在其他目录下则不然了； 命令中选项解释：if：即输入文件,input file，of：即输出文件,output file，dev/zero：是Linux的一种特殊字符设备(输入设备)，可以用来创建一个指定长度用于初始化的空文件，如临时交换文件，该设备无穷尽地提供0，可以提供任何你需要的数目；bs=1024 ：单位数据块（block）同时读入/输出的块字节大小为1024 个字节即1KB；count=128000 ：数据块（block）数量为128000 ，即128000个1KB。（dd命令里的单位M表示1024*1024,k表示1024）。 2、将swapfile设置为swap空间 1mkswap swapfile 3、启用交换空间： 1swapon swapfile 至此增加交换空间的操作结束了，可以使用free命令查看swap空间大小是否发生变化；4、如果不再使用空间可以选择关闭交换空间: 1swapoff swapfile 使用这种方法在每次系统启动时都需要手动设置、开启swapfile，比较麻烦，解决方法：在 /etc/rc.d/rc.local 文件的末行下追加加以下内容：/sbin/swapon /swapfile保存后退出，这样在系统启动后，swap空间就会自动加载了。 方式二：查看内存及cpu使用情况的命令：1top 方式三：安装htop工具，查看更直观安装命令如下： 123456#Ubuntu 使用 apt-get 安装sudo apt-get install htop#Centos7 使用yum安装sudo yum -y install epel-release #先增加一个第三方的源，名字叫：EPELsudo yum -y install htop 安装完后，直接输入命令： 1htop 即可看到如下信息：","categories":[{"name":"Linux","slug":"Linux","permalink":"http://linco.com/categories/Linux/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"http://linco.com/tags/Docker/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://linco.com/categories/Linux/"}]},{"title":"Centos7 安装指定版本 Docker","slug":"centos7安装docker","date":"2020-03-26T13:09:56.873Z","updated":"2020-03-27T15:22:27.123Z","comments":true,"path":"2020/03/26/centos7安装docker/","link":"","permalink":"http://linco.com/2020/03/26/centos7%E5%AE%89%E8%A3%85docker/","excerpt":"","text":"卸载旧版本12345678sudo yum remove docker \\ docker-client \\ docker-client-latest \\ docker-common \\ docker-latest \\ docker-latest-logrotate \\ docker-logrotate \\ docker-engine Docker 默认安装1$ yum -y install docker # 默认安装最新版本 Docker安装指定版本安装所需软件包yum-utils 提供了 yum-config-manager ，并且 device mapper 存储驱动程序需要 device-mapper-persistent-data 和 lvm2。 123$ sudo yum install -y yum-utils \\ device-mapper-persistent-data \\ lvm2 使用yum-config-manager 添加docker仓库123$ sudo yum-config-manager \\ --add-repo \\ https://download.docker.com/linux/centos/docker-ce.repo 执行以下命令，列出 docker 所有可用版本1$ yum list docker-ce --showduplicates | sort -r 根据自己选择特定版本号的docker安装$ sudo yum install docker-ce- docker-ce-cli- containerd.io 例如： 1sudo yum install docker-ce-18.09.9 docker-ce-cli-18.09.9 containerd.io -y 启动 Docker 并且配置 开机自启动12$ sudo systemctl start docker$ sudo systemctl enable docker 配置阿里云镜像加速自行注册阿里云账号，获取自己的镜像加速地址：https://cr.console.aliyun.com/cn-hongkong/instances/mirrors 解决普通用户（非root)无权限使用docker命令问题docker进程使用Unix Socket而不是TCP端口。而默认情况下，Unix socket属于root用户，需要root权限才能访问。为了方便普通用户每次执行docker不需要加sudo,我们可以用以下方法给普通用户授权： docker守护进程启动的时候，会默认赋予名字为docker的用户组读写Unix socket的权限，因此只要创建docker用户组，并将当前用户加入到docker用户组中，那么当前用户就有权限访问Unix socket了，进而也就可以执行docker相关命令。 1234sudo groupadd docker #添加docker用户组sudo gpasswd -a $USER docker #将登陆用户加入到docker用户组中newgrp docker #更新用户组docker ps #测试docker命令是否可以使用sudo正常使用 结束语Centos7 安装 Docker 就此完成，感谢支持！","categories":[{"name":"Linux","slug":"Linux","permalink":"http://linco.com/categories/Linux/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"Docker","slug":"Docker","permalink":"http://linco.com/tags/Docker/"},{"name":"后端","slug":"后端","permalink":"http://linco.com/tags/%E5%90%8E%E7%AB%AF/"}],"keywords":[{"name":"Linux","slug":"Linux","permalink":"http://linco.com/categories/Linux/"}]},{"title":"Mybatis 入门","slug":"mybatis入门01","date":"2020-03-20T07:25:40.122Z","updated":"2020-03-20T16:32:15.138Z","comments":true,"path":"2020/03/20/mybatis入门01/","link":"","permalink":"http://linco.com/2020/03/20/mybatis%E5%85%A5%E9%97%A801/","excerpt":"","text":"Mybatis简介MyBatis 前身是iBatis,其源于“Internet”和“ibatis”的组合， 是一款优秀的持久层框架，它支持自定义SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。 其本质是一种半自动的ORM 框架，除了POJO 和映射关系之外，还需要编写SQL 语句；Mybatis 映射文件三要素：SQL、映射规则和POJO为什么需要ORM框架传统的JDBC 编程存在的弊端: - 工作量大，操作数据库至少要5步； - 业务代码和技术代码耦合； - 连接资源手动关闭，带来了隐患。入门导入依赖12345&lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.5.4&lt;/version&gt;&lt;/dependency&gt; 创建Mybatis配置文件文件名：mybatis-config.xml, 以下主要列出mybatis配置文件的顶层结构，详细配置可参考:mybatis.org 123456789101112131415161718192021222324252627282930313233343536&lt;?xml version=\"1.0\" encoding=\"ISO-8859-1\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt; &lt;!--properties属性配置--&gt; &lt;properties/&gt; &lt;!--设置--&gt; &lt;settings/&gt; &lt;!--类型别名，类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。--&gt; &lt;typeAliases/&gt; &lt;!--类型处理器--&gt; &lt;typeHandlers/&gt; &lt;!-- 对象工厂--&gt; &lt;objectFactory&gt; &lt;!-- 插件 --&gt; &lt;plugins）/&gt; &lt;!--environments 元素定义了如何配置环境。--&gt; &lt;environments default=\"development\"&gt; &lt;environment/&gt; &lt;!-- 事务管理器 --&gt; &lt;transactionManager/&gt; &lt;!--数据源--&gt; &lt;dataSource&gt; &lt;/environments&gt; &lt;!-- 映射器 --&gt; &lt;mappers&gt; &lt;mapper resource=\"sqlmapper/UserMapper.xml\"/&gt; &lt;/mappers&gt;&lt;/configuration&gt; 创建 Java Bean 实体类12345678910package com.colin.mybatisdemo.entiry;public class User &#123; private Integer id; private String userName; private String mobile;&#125; 创建 Mapper 接口跟Mapper xml 文件映射 1234567package com.colin.mybatisdemo.mapper;import com.colin.mybatisdemo.entiry.User;public interface UserMapper &#123; User getOneById(int id);&#125; 创建 Mapper xml 映射文件123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapper PUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-mapper.dtd\" &gt;&lt;mapper namespace=\"com.colin.mybatisdemo.mapper.UserMapper\"&gt; &lt;select id=\"getOneById\" resultType=\"User\"&gt; SELECT * from USER where id = #&#123;id, jdbcType=INTEGER&#125;; &lt;/select&gt;&lt;/mapper&gt; &emsp;&emsp;MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。 &emsp;&emsp;SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）： cache – 该命名空间的缓存配置。 cache-ref – 引用其它命名空间的缓存配置。 resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。 parameterMap – 老式风格的参数映射。此元素已被废弃，并可能在将来被移除！请使用行内参数映射。文档中不会介绍此元素。 sql – 可被其它语句引用的可重用语句块。 insert – 映射插入语句。 update – 映射更新语句。 delete – 映射删除语句。 select – 映射查询语句。 具体使用详解可参考：[mybatis.org](https://mybatis.org/mybatis-3/zh/sqlmap-xml.html)创建一个测试类-快速入门12345678910111213141516171819202122232425262728public class UserMapperTest &#123; private SqlSessionFactory sqlSessionFactory; @Before public void testBefore() throws IOException &#123; //--------------------第一阶段--------------------------- // 1.读取mybatis配置文件创SqlSessionFactory String resource = \"mybatis-config.xml\"; InputStream inputStream = Resources.getResourceAsStream(resource); // 1.读取mybatis配置文件创SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(inputStream); inputStream.close(); &#125; @Test public void testGetOneById()&#123; //--------------------第二阶段--------------------------- // 2.获取sqlSession SqlSession sqlSession = sqlSessionFactory.openSession(); // 3.获取对应mapper UserMapper userMapper = sqlSession.getMapper(UserMapper.class); //--------------------第三阶段--------------------------- // 4.执行查询语句并返回单条数据 User user = userMapper.getOneById(1); System.out.println(user.getUserName() + \":\" + user.getMobile()); &#125;&#125; 结束语Mybatis 入门介绍就讲到这里了，博客Demo源码请访问：mybatis-demo","categories":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}],"tags":[{"name":"博客","slug":"博客","permalink":"http://linco.com/tags/%E5%8D%9A%E5%AE%A2/"},{"name":"MyBatis","slug":"MyBatis","permalink":"http://linco.com/tags/MyBatis/"}],"keywords":[{"name":"后端","slug":"后端","permalink":"http://linco.com/categories/%E5%90%8E%E7%AB%AF/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-19T15:11:45.272Z","updated":"2020-03-28T11:39:08.605Z","comments":true,"path":"2020/03/19/hello-world/","link":"","permalink":"http://linco.com/2020/03/19/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"前端","slug":"前端","permalink":"http://linco.com/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[],"keywords":[{"name":"前端","slug":"前端","permalink":"http://linco.com/categories/%E5%89%8D%E7%AB%AF/"}]}]}